{
  
    
        "post0": {
            "title": "Option 1. Ordered in genotype space",
            "content": "Specify some strange file locations . dosagefile = &#39;/cbscratch/sbanerj/gtex_pca/gtex_v8_filtered.dosage.raw&#39; dosage_numpy_file = &#39;/cbscratch/sbanerj/gtex_pca/gtex_dosage.npy&#39; eigensoft_file = &#39;/cbscratch/sbanerj/gtex_pca/GTEX_v8_2020-02-21_WGS_838Indiv_Freeze_SHAPEIT2_phased_NoMissingGT_SNPfilter_MAF0.05_allchr_ldpruned.pca.evec&#39; expression_file = &#39;/scratch/sbanerj/trans-eqtl/input/gtex_v8/expression/gtex_ms_raw_std_protein_coding_lncRNA.txt&#39; . Setup environment . import numpy as np import pandas as pd from sklearn.decomposition import PCA from scipy import stats import os from scipy.cluster import hierarchy as hc import matplotlib.pyplot as plt import matplotlib from mpl_toolkits.axes_grid1 import make_axes_locatable import sys sys.path.append(&#39;../&#39;) from utils import mpl_stylesheet mpl_stylesheet.banskt_presentation(fontfamily = &#39;latex-clearsans&#39;, fontsize = 18, colors = &#39;banskt&#39;, dpi = 300) . Load data . def read_gtex(filename): # returns N x G gene expression expr_list = list() donor_list = list() gene_list = list() with open(filename) as mfile: donor_list = mfile.readline().strip().split(&quot; t&quot;)[1:] for line in mfile: linesplit = line.strip().split(&quot; t&quot;) gene = linesplit[0].strip() gene_list.append(gene) expr = np.array([float(x) for x in linesplit[1:]]) expr_list.append(expr) expr = np.transpose(np.array(expr_list)) return expr, donor_list, gene_list if not os.path.isfile(dosage_numpy_file): dosage = np.loadtxt(dosagefile, delimiter=&#39; &#39;, skiprows=1, usecols=range(6, 97612)) np.save(dosage_numpy_file, dosage) else: dosage = np.load(dosage_numpy_file) gtsamples = list() with open (dosagefile, &#39;r&#39;) as infile: next(infile) for line in infile: gtsamples.append(line.strip().split()[1]) gx, gxsamples, _ = read_gtex(expression_file) sampleidx = [gtsamples.index(x) for x in gxsamples] # assumes all expression samples have genotype dreduce = dosage[sampleidx, :] gt = dreduce - np.mean(dreduce, axis = 0).reshape(1, -1) print(f&#39;{len(sampleidx)} samples, {gx.shape[1]} genes, {gt.shape[1]} SNPs.&#39;) print(f&#39;Centered and normalized genotype and expression. Samples in same order as `gxsamples`&#39;) . 706 samples, 13236 genes, 97606 SNPs. Centered and normalized genotype and expression. Samples in same order as `gxsamples` . Core functionality modules . Calculate PCA, distance matrix and KNN. Also need to map distance matrix from one sample space to another. Remove first N principal components from any matrix X . def get_pca(x, K): pca = PCA(n_components=K) pca.fit(x) # requires N x P (n_samples, n_features) x_pca = pca.transform(x) return x_pca def get_distance(a, b): return np.linalg.norm(a - b) def distance_matrix(x_pca): nsample = x_pca.shape[0] distance_matrix = np.zeros((nsample, nsample)) for i in range(nsample): for j in range(i+1, nsample): dist = get_distance(x_pca[i,:], x_pca[j,:]) distance_matrix[i, j] = dist distance_matrix[j, i] = dist return distance_matrix def map_distance_matrix(dm, samples, target_samples): N = len(target_samples) newdm = np.zeros((N, N)) newdm[:] = np.nan for i in range(N): if target_samples[i] in samples: newdm[i, i] = 0 # diagonal is always zero iold = samples.index(target_samples[i]) for j in range(i+1, N): if target_samples[j] in samples: jold = samples.index(target_samples[j]) newdm[i, j] = dm[iold, jold] newdm[j, i] = dm[jold, iold] return newdm def knn(gx, gt, dm, K): assert (gx.shape[0] == gt.shape[0]) N = gx.shape[0] gx_knn = np.zeros_like(gx) gt_knn = np.zeros_like(gt) for i in range(N): #neighbors = np.argsort(distance_matrix[i, :kneighbor + 1]) neighbors = np.argsort(dm[i, :])[:K + 1][1:] gx_knn[i, :] = gx[i, :] - np.mean(gx[neighbors, :], axis = 0) gt_knn[:, i] = gt[:, i] - np.mean(gt[:, neighbors[1:]], axis = 1) return gx_knn, gt_knn def remove_nfirst_pcs(X, n=1): mu = np.mean(X, axis = 0) Xnorm = X - mu U, S, Vt = np.linalg.svd(Xnorm, full_matrices=False) Xhat = U[:, n:] @ np.diag(S[n:]) @ Vt[n:, :] Xhat += mu return Xhat . def plot_distance_matrices(dmA, dmB, norms = None): &#39;&#39;&#39; provide norms, if required, as norms = (norm1, norm2) where, norm1 = matplotlib.colors.DivergingNorm(vmin=10., vcenter=90., vmax=170.) norm2 = matplotlib.colors.DivergingNorm(vmin=0., vcenter=90., vmax=300.) &#39;&#39;&#39; fig = plt.figure(figsize = (12, 6)) ax1 = fig.add_subplot(121) ax2 = fig.add_subplot(122) # the zero distance between the same samples # is bad for the color scale. dmA[np.diag_indices(dmA.shape[0])] = np.nan dmB[np.diag_indices(dmB.shape[0])] = np.nan cmap1 = plt.get_cmap(&quot;YlOrRd&quot;) cmap1.set_bad(&#39;w&#39;) cmap2 = plt.get_cmap(&quot;YlGnBu&quot;) cmap2.set_bad(&#39;w&#39;) if norms is not None: norm1 = norms[0] norm2 = norms[1] im1 = ax1.imshow(dmA, cmap = cmap1, norm = norm1, interpolation=&#39;nearest&#39;) im2 = ax2.imshow(dmB, cmap = cmap2, norm = norm2, interpolation=&#39;nearest&#39;) else: im1 = ax1.imshow(dmA, cmap = cmap1, interpolation=&#39;nearest&#39;) im2 = ax2.imshow(dmB, cmap = cmap2, interpolation=&#39;nearest&#39;) divider = make_axes_locatable(ax1) cax = divider.append_axes(&quot;right&quot;, size=&quot;5%&quot;, pad=0.2) cbar = plt.colorbar(im1, cax=cax, fraction = 0.1) divider = make_axes_locatable(ax2) cax = divider.append_axes(&quot;right&quot;, size=&quot;5%&quot;, pad=0.2) cbar = plt.colorbar(im2, cax=cax, fraction = 0.1) ax1.set_title(&quot;Genotype space&quot;, pad = 20) ax2.set_title(&quot;Expression space&quot;, pad = 20) plt.tight_layout() return fig . Calculate KNN and double KNN . # Before KNN dm_gt = distance_matrix(get_pca(gt, 20)) dm_gx = distance_matrix(get_pca(gx, 30)) # Expression KNN K = 30 gx_knn, gt_knn = knn(gx, gt, dm_gx, K) dm_gt_knn = distance_matrix(get_pca(gt_knn, 40)) dm_gx_knn = distance_matrix(get_pca(gx_knn, gx_knn.shape[0])) # Double KNN K1 = 10 K2 = 30 gx_knn1, gt_knn1 = knn(gx, gt, dm_gt, K1) dm_gx1 = distance_matrix(get_pca(gx_knn1, gx_knn1.shape[0])) gx_knn2, gt_knn2 = knn(gx_knn1, gt_knn1, dm_gx1, K2) dm_gt_knn2 = distance_matrix(get_pca(gt_knn2, 40)) dm_gx_knn2 = distance_matrix(get_pca(gx_knn2, gx_knn2.shape[0])) . o1 = hc.leaves_list(hc.linkage(dm_gt, method = &#39;centroid&#39;)) . /usr/users/sbanerj/miniconda3/envs/py36/lib/python3.7/site-packages/ipykernel_launcher.py:1: ClusterWarning: scipy.cluster: The symmetric non-negative hollow observation matrix looks suspiciously like an uncondensed distance matrix &#34;&#34;&#34;Entry point for launching an IPython kernel. . norm1 = matplotlib.colors.DivergingNorm(vmin=10., vcenter=90., vmax=170.) norm2 = matplotlib.colors.DivergingNorm(vmin=0., vcenter=75., vmax=300.) norms = (norm1, norm2) . mgt = dm_gt[o1, :][:, o1] mgx = dm_gx[o1, :][:, o1] fig = plot_distance_matrices(mgt, mgx, norms = norms) fig.suptitle(&quot;Distance between samples before KNN&quot;) plt.show() . mgt = dm_gt_knn[o1, :][:, o1] mgx = dm_gx_knn[o1, :][:, o1] fig = plot_distance_matrices(mgt, mgx, norms = norms) fig.suptitle(&quot;Distance between samples after KNN&quot;) plt.show() . mgt = dm_gt_knn2[o1, :][:, o1] mgx = dm_gx_knn2[o1, :][:, o1] fig = plot_distance_matrices(mgt, mgx, norms = norms) fig.suptitle(&quot;Distance between samples after double KNN&quot;) plt.show() . Option 2. Ordered in expression space . o2 = hc.leaves_list(hc.linkage(dm_gx, method=&#39;centroid&#39;)) . /usr/users/sbanerj/miniconda3/envs/py36/lib/python3.7/site-packages/ipykernel_launcher.py:1: ClusterWarning: scipy.cluster: The symmetric non-negative hollow observation matrix looks suspiciously like an uncondensed distance matrix &#34;&#34;&#34;Entry point for launching an IPython kernel. . mgt = dm_gt[o2, :][:, o2] mgx = dm_gx[o2, :][:, o2] fig = plot_distance_matrices(mgt, mgx, norms = norms) fig.suptitle(&quot;Distance between samples before KNN&quot;) plt.show() . mgt = dm_gt_knn[o2, :][:, o2] mgx = dm_gx_knn[o2, :][:, o2] fig = plot_distance_matrices(mgt, mgx, norms = norms) fig.suptitle(&quot;Distance between samples after KNN&quot;) plt.show() . mgt = dm_gt_knn2[o2, :][:, o2] mgx = dm_gx_knn2[o2, :][:, o2] fig = plot_distance_matrices(mgt, mgx, norms = norms) fig.suptitle(&quot;Distance between samples after double KNN&quot;) plt.show() . Finally, let&#39;s look at the difference between KNN and double-KNN . mgt = dm_gt_knn2[o1, :][:, o1] - dm_gt_knn[o1, :][:, o1] mgx = dm_gx_knn2[o1, :][:, o1] - dm_gx_knn[o1, :][:, o1] fig = plot_distance_matrices(mgt, mgx) plt.show() . Remove first PC from distance matrix before calculating neighbors. . !! All variables are reassigned here !! . # Before KNN dm_gt = distance_matrix(get_pca(gt, 20)) dm_gx = distance_matrix(get_pca(gx, 30)) dm_gx_corr = remove_nfirst_pcs(dm_gx, n=2) # Expression KNN K = 30 gx_knn, gt_knn = knn(gx, gt, dm_gx_corr, K) dm_gt_knn = distance_matrix(get_pca(gt_knn, 40)) dm_gx_knn = distance_matrix(get_pca(gx_knn, gx_knn.shape[0])) # Double KNN K1 = 10 K2 = 30 gx_knn1, gt_knn1 = knn(gx, gt, dm_gt, K1) dm_gx1 = distance_matrix(get_pca(gx_knn1, gx_knn1.shape[0])) dm_gx1_corr = remove_nfirst_pcs(dm_gx1, n=2) gx_knn2, gt_knn2 = knn(gx_knn1, gt_knn1, dm_gx1_corr, K2) dm_gt_knn2 = distance_matrix(get_pca(gt_knn2, 40)) dm_gx_knn2 = distance_matrix(get_pca(gx_knn2, gx_knn2.shape[0])) . Using Option 2: Ordered in expression space. . Now ordering in expression space and genotype space are similar. Probably, we removed other covariates, and population substructure becomes the most important confounder. . o2 = hc.leaves_list(hc.linkage(dm_gx_corr, method = &#39;centroid&#39;)) . norm1 = matplotlib.colors.DivergingNorm(vmin=10., vcenter=90., vmax=170.) norm2 = matplotlib.colors.DivergingNorm(vmin=0., vcenter=80., vmax=300.) norms = (norm1, norm2) . mgt = dm_gt[o2, :][:, o2] mgx = dm_gx_corr[o2, :][:, o2] fig = plot_distance_matrices(mgt, mgx, norms = norms) fig.suptitle(&quot;Distance between samples before KNN&quot;) plt.show() . mgt = dm_gt_knn[o2, :][:, o2] mgx = dm_gx_knn[o2, :][:, o2] fig = plot_distance_matrices(mgt, mgx, norms = norms) fig.suptitle(&quot;Distance between samples after KNN&quot;) plt.show() . mgt = dm_gt_knn2[o2, :][:, o2] mgx = dm_gx_knn2[o2, :][:, o2] fig = plot_distance_matrices(mgt, mgx, norms = norms) fig.suptitle(&quot;Distance between samples after double KNN&quot;) plt.show() .",
            "url": "https://banskt.github.io/trans-eqtl-ideas/2020/05/18/exploring-double-KNN-correction-using-distance-matrix-between-samples.html",
            "relUrl": "/2020/05/18/exploring-double-KNN-correction-using-distance-matrix-between-samples.html",
            "date": " • May 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Exploring genotype PCA",
            "content": "Setup . This notebook requires: . LD filtered genotype | Eigenvectors file from EIGENSOFT | Gene expression matrix | Load data . #collapse-hide dosagefile = &#39;/cbscratch/sbanerj/gtex_pca/gtex_v8_filtered.dosage.raw&#39; dosage_numpy_file = &#39;/cbscratch/sbanerj/gtex_pca/gtex_dosage.npy&#39; eigensoft_file = &#39;/cbscratch/sbanerj/gtex_pca/GTEX_v8_2020-02-21_WGS_838Indiv_Freeze_SHAPEIT2_phased_NoMissingGT_SNPfilter_MAF0.05_allchr_ldpruned.pca.evec&#39; expression_file = &#39;/scratch/sbanerj/trans-eqtl/input/gtex_v8/expression/gtex_ms_raw_std_protein_coding_lncRNA.txt&#39; . . Load Python libraries . #collapse-hide import numpy as np import pandas as pd from sklearn.decomposition import PCA from scipy import stats import os import matplotlib.pyplot as plt import matplotlib from mpl_toolkits.axes_grid1 import make_axes_locatable from utils import mpl_stylesheet mpl_stylesheet.banskt_presentation(fontfamily = &#39;latex-clearsans&#39;, fontsize = 18, colors = &#39;banskt&#39;, dpi = 300) . . Read input data . #collapse-hide if not os.path.isfile(dosage_numpy_file): dosage = np.loadtxt(dosagefile, delimiter=&#39; &#39;, skiprows=1, usecols=range(6, 97612)) np.save(dosage_numpy_file, dosage) else: dosage = np.load(dosage_numpy_file) gtcent = dosage - np.mean(dosage, axis = 0).reshape(1, -1) gtsamples = list() with open (dosagefile, &#39;r&#39;) as infile: next(infile) for line in infile: gtsamples.append(line.strip().split()[1]) . . Core functionalities . #collapse-hide def get_pca(x, K): pca = PCA(n_components=K) pca.fit(x) # requires N x P (n_samples, n_features) x_pca = pca.transform(x) return pca, x_pca def get_distance(a, b): return np.linalg.norm(a - b) def distance_matrix(x_pca): nsample = x_pca.shape[0] distance_matrix = np.zeros((nsample, nsample)) for i in range(nsample): for j in range(i+1, nsample): dist = get_distance(x_pca[i,:], x_pca[j,:]) distance_matrix[i, j] = dist distance_matrix[j, i] = dist return distance_matrix def map_distance_matrix(dm, samples, target_samples): N = len(target_samples) newdm = np.zeros((N, N)) newdm[:] = np.nan for i in range(N): if target_samples[i] in samples: newdm[i, i] = 0 # diagonal is always zero iold = samples.index(target_samples[i]) for j in range(i+1, N): if target_samples[j] in samples: jold = samples.index(target_samples[j]) newdm[i, j] = dm[iold, jold] newdm[j, i] = dm[jold, iold] return newdm . . Compare EIGENSOFT with Python PCA. . Note that PC = eigenvector * signgular value . ##collapse-hide eigensoft_evec = np.loadtxt(eigensoft_file, skiprows = 0, usecols = range(1, 21)) eigensoft_sval = np.array([float(x) for x in open(eigensoft_file).readline().rstrip().split()[1:]]) pca_obj, gtpca = get_pca(gtcent, 20) . mpl_stylesheet.banskt_presentation(fontfamily = &#39;latex-clearsans&#39;, fontsize = 18, colors = &#39;banskt&#39;, dpi = 72) fig = plt.figure(figsize = (18, 6)) ax1 = fig.add_subplot(131) ax2 = fig.add_subplot(132) ax3 = fig.add_subplot(133) ax1.scatter(gtpca[:, 0], gtpca[:, 1], s = 20, marker = &#39;o&#39;, edgecolor = &#39;black&#39;, color = &#39;gray&#39;, alpha = 0.2) ax1.set_xlabel(&quot;PC1&quot;) ax1.set_ylabel(&quot;PC2&quot;) ax1.set_title(&quot;Python Sklearn&quot;, pad = 20) ax2.scatter(eigensoft_evec[:, 0], eigensoft_evec[:, 1], s = 20, marker = &#39;o&#39;, edgecolor = &#39;black&#39;, color = &#39;gray&#39;, alpha = 0.2) ax2.set_xlabel(&quot;eigenvector 1&quot;) ax2.set_ylabel(&quot;eigenvector 2&quot;) ax2.set_title(&quot;EIGENSOFT&quot;, pad = 20) k = 1 ax3.scatter(gtpca[:, k], eigensoft_evec[:, k] * pca_obj.singular_values_[k], s = 20, marker = &#39;o&#39;, edgecolor = &#39;black&#39;, color = &#39;gray&#39;, alpha = 0.2) ax3.set_xlabel(&quot;Python Sklearn&quot;) ax3.set_ylabel(&quot;EIGENSOFT&quot;) ax3.set_title(f&#39;Principal Component {k}&#39;, pad = 20) plt.tight_layout() plt.show() . Double KNN correction . Number of PCs for reducing dimension . I need to reduce the dimensionality of the genotype matrix for calculating distance matrix between samples in the reduced dimension of the genotype space. It might be interesting to check how the target dimension $D$ affects the distance matrix. Here, we checked $D=20$ and $D=40$ . #collapse-hide pcagt20_obj, gtpca_20 = get_pca(gtcent, 20) pcagt40_obj, gtpca_40 = get_pca(gtcent, 40) dm20 = distance_matrix(gtpca_20) dm40 = distance_matrix(gtpca_40) . . I clustered the distance matrix calculated with $D=20$. . from scipy.cluster import hierarchy as hc link = hc.linkage(dm20, method=&#39;centroid&#39;) o1 = hc.leaves_list(link) . /usr/users/sbanerj/miniconda3/envs/py36/lib/python3.7/site-packages/ipykernel_launcher.py:2: ClusterWarning: scipy.cluster: The symmetric non-negative hollow observation matrix looks suspiciously like an uncondensed distance matrix . mgt20 = dm20[o1,:][:,o1] mgt40 = dm40[o1,:][:,o1] . fig = plt.figure(figsize = (18, 6)) ax1 = fig.add_subplot(131) ax2 = fig.add_subplot(132) ax3 = fig.add_subplot(133) norm = matplotlib.colors.DivergingNorm(vmin=0, vcenter=50., vmax=170.) cmap = plt.get_cmap(&quot;YlOrRd&quot;) im1 = ax1.imshow(mgt20, cmap=cmap, norm = norm, interpolation=&#39;nearest&#39;) im2 = ax2.imshow(mgt40, cmap=cmap, norm = norm, interpolation=&#39;nearest&#39;) im3 = ax3.imshow(np.abs(mgt20 - mgt40), cmap = cmap, norm = norm, interpolation=&#39;nearest&#39;) divider = make_axes_locatable(ax1) cax = divider.append_axes(&quot;right&quot;, size=&quot;5%&quot;, pad=0.2) cbar = plt.colorbar(im1, cax=cax, fraction = 0.1) divider = make_axes_locatable(ax2) cax = divider.append_axes(&quot;right&quot;, size=&quot;5%&quot;, pad=0.2) cbar = plt.colorbar(im2, cax=cax, fraction = 0.1) divider = make_axes_locatable(ax3) cax = divider.append_axes(&quot;right&quot;, size=&quot;5%&quot;, pad=0.2) cbar = plt.colorbar(im3, cax=cax, fraction = 0.1) ax1.set_title(&quot;D = 20&quot;, pad = 20) ax2.set_title(&quot;D = 40&quot;, pad = 20) ax3.set_title(&quot;Difference&quot;, pad = 20) plt.tight_layout() #plt.savefig(&#39;../plots/gtex_samples_in_genotype_space.png&#39;, bbox_inches=&#39;tight&#39;) plt.show() . ## Variance explained by the eigenvectors . #collapse-hide fig = plt.figure(figsize = (12, 6)) ax1 = fig.add_subplot(111) ax1.bar(np.arange(1, 21), eigensoft_sval) ax1.set_xlabel(&#39;Number of components&#39;) ax1.set_ylabel(&#39;Eigenvalues&#39;) ax1.set_xticks(list(range(0, 21, 4))) plt.tight_layout() #plt.savefig(&#39;../plots/gtex_genotype_pc_explained_variance.png&#39;, bbox_inches=&#39;tight&#39;) plt.show() . . Relationship with sample distance in expression spaces . Read GTEx gene expression . #collapse-hide def read_gtex(filename): # returns N x G gene expression expr_list = list() donor_list = list() gene_list = list() with open(filename) as mfile: donor_list = mfile.readline().strip().split(&quot; t&quot;)[1:] for line in mfile: linesplit = line.strip().split(&quot; t&quot;) gene = linesplit[0].strip() gene_list.append(gene) expr = np.array([float(x) for x in linesplit[1:]]) expr_list.append(expr) expr = np.transpose(np.array(expr_list)) return expr, donor_list, gene_list . . gx, gxsamples, genelist = read_gtex(expression_file) . Reduce dimension . For the genes, I reduced dimension $D&#39; = N, 20, 40$ where $N$ is the number of samples . _, gxpca_n = get_pca(gx, gx.shape[0]) _, gxpca_20 = get_pca(gx, 20) _, gxpca_40 = get_pca(gx, 40) . dmgxN = distance_matrix(gxpca_n) dmgx20 = distance_matrix(gxpca_20) dmgx40 = distance_matrix(gxpca_40) . target_samples = [gtsamples[x] for x in o1] mgxN = map_distance_matrix(dmgxN, gxsamples, target_samples) mgx20 = map_distance_matrix(dmgx20, gxsamples, target_samples) mgx40 = map_distance_matrix(dmgx40, gxsamples, target_samples) . fig = plt.figure(figsize = (12, 12)) ax1 = fig.add_subplot(221) ax2 = fig.add_subplot(222) ax3 = fig.add_subplot(223) ax4 = fig.add_subplot(224) norm1 = matplotlib.colors.DivergingNorm(vmin=0, vcenter=50., vmax=170.) cmap1 = plt.get_cmap(&quot;YlOrRd&quot;) norm2 = norm2 = matplotlib.colors.DivergingNorm(vmin=0., vcenter=75., vmax=300.) cmap2 = plt.get_cmap(&quot;GnBu&quot;) #cmap2.set_bad(&#39;paleturquoise&#39;) cmap2.set_bad(&#39;w&#39;) im1 = ax1.imshow(mgt20, cmap = cmap1, interpolation=&#39;nearest&#39;) im2 = ax2.imshow(mgxN, cmap = cmap2, interpolation=&#39;nearest&#39;) im3 = ax3.imshow(mgx20, cmap = cmap2, interpolation=&#39;nearest&#39;) im4 = ax4.imshow(mgx40, cmap = cmap2, interpolation=&#39;nearest&#39;) for axi, imi in zip([ax1, ax2, ax3, ax4], [im1, im2, im3, im4]): divider = make_axes_locatable(axi) cax = divider.append_axes(&quot;right&quot;, size=&quot;5%&quot;, pad=0.2) cbar = plt.colorbar(imi, cax=cax, fraction = 0.1) ax1.set_title(&quot;Genotype space&quot;, pad = 20) for axi, dim in zip([ax2, ax3, ax4], [&#39;N&#39;, &#39;20&#39;, &#39;40&#39;]): axi.set_title(f&quot;Expression space, $D = {dim}$&quot;, pad = 20) plt.tight_layout() #plt.savefig(&#39;../plots/gtex_samples_in_expression_space.png&#39;, bbox_inches=&#39;tight&#39;) plt.show() .",
            "url": "https://banskt.github.io/trans-eqtl-ideas/jupyter/2020/05/16/exploring-genotype-PCA-for-double-KNN-implementation.html",
            "relUrl": "/jupyter/2020/05/16/exploring-genotype-PCA-for-double-KNN-implementation.html",
            "date": " • May 16, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://banskt.github.io/trans-eqtl-ideas/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://banskt.github.io/trans-eqtl-ideas/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://banskt.github.io/trans-eqtl-ideas/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://banskt.github.io/trans-eqtl-ideas/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}